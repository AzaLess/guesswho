import { useEffect, useState } from "react";
import { getGameState, sendGuessEvent } from "../api";
import { useNavigate } from "react-router-dom";

export default function GameRound() {
  const token = localStorage.getItem("token") || "";
  const player = JSON.parse(localStorage.getItem("player") || "{}");
  const [facts, setFacts] = useState<any[]>([]);
  const [players, setPlayers] = useState<any[]>([]);
  const [scores, setScores] = useState<any[]>([]);
  const [current, setCurrent] = useState<any | null>(null);
  const [wrongGuesses, setWrongGuesses] = useState(0);
  const [correctGuesser, setCorrectGuesser] = useState("");
  const [result, setResult] = useState("");
  const [loading, setLoading] = useState(false);
  const [dataLoaded, setDataLoaded] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    const loadGameData = async () => {
      try {
        console.log("GameRound: Loading game state for player:", player);
        const data = await getGameState(token);
        console.log("GameRound: Game state received:", data);
        const unguessed = data.facts.filter((f: any) => !f.guessed);
        console.log("GameRound: All facts:", data.facts);
        console.log("GameRound: Unguessed facts:", unguessed);
        console.log("GameRound: Current fact will be set to:", unguessed[0] || null);
        setFacts(unguessed);
        setCurrent(unguessed[0] || null);
        setPlayers(data.players);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –æ—á–∫–æ–≤
        const scoresData = await fetch(`/api/game/scoreboard/${token}/`).then(r => r.json());
        setScores(scoresData);
        
        // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        setDataLoaded(true);
      } catch (error) {
        console.error("Error loading game data:", error);
        setDataLoaded(true); // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ
      }
    };

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É
    loadGameData();
    
    // –î–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–Ω–µ –≤–µ–¥—É—â–∏—Ö) –¥–æ–±–∞–≤–ª—è–µ–º polling –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
    let interval: number | null = null;
    if (!player.is_host) {
      interval = setInterval(loadGameData, 3000);
    }
    
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [token, player.id, player.is_host]);

  const handleNext = async () => {
    const idx = facts.indexOf(current);
    setCurrent(facts[idx + 1] || null);
    setWrongGuesses(0);
    setCorrectGuesser("");
    setResult("");
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
    if (player.is_host) {
      try {
        const data = await getGameState(token);
        const unguessed = data.facts.filter((f: any) => !f.guessed);
        setFacts(unguessed);
        // –û–±–Ω–æ–≤–ª—è–µ–º current –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        setCurrent(unguessed[0] || null);
      } catch (error) {
        console.error("Error updating game data for host:", error);
      }
    }
  };

  const handleResult = async () => {
    if (!current) return;
    setLoading(true);
    try {
      const correctPlayerId = Number(correctGuesser);
      await sendGuessEvent(current.id, correctPlayerId, wrongGuesses);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –æ—á–∫–æ–≤ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      const updatedScores = await fetch(`/api/game/scoreboard/${token}/`).then(r => r.json());
      setScores(updatedScores);
      setResult("–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!");
      setTimeout(handleNext, 1000);
    } catch {
      alert("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞");
    }
    setLoading(false);
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É, –ø–æ–∫–∞ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
  if (!dataLoaded) {
    return (
      <div className="app-container">
        <h2>‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã...</h2>
      </div>
    );
  }

  // –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã
  if (!current) {
    console.log("GameRound: No current fact after data loaded! Facts array:", facts, "Current:", current);
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    setTimeout(() => navigate("/end"), 1000);
    return (
      <div className="app-container">
        <h2>üéâ –†–∞—É–Ω–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã! üéâ</h2>
        <p>–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º...</p>
      </div>
    );
  }

  // –°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤
  const questionsLeft = facts.length;

  // –¢–∞–±–ª–∏—Ü–∞ –æ—á–∫–æ–≤
  const scoreboard = (
    <div style={{ margin: "18px 0" }}>
      <h3>üèÜ –¢–∞–±–ª–∏—Ü–∞ –æ—á–∫–æ–≤</h3>
      <ul style={{ listStyle: "none", padding: 0 }}>
        {scores.map((s: any) => (
          <li key={s.id}>
            {s.player_emoji || "üßë"} <b>{s.player_name || players.find((p: any) => p.id === s.player)?.name || s.player}</b>: {s.points}
          </li>
        ))}
      </ul>
    </div>
  );

  // –î–ª—è –≤–µ–¥—É—â–µ–≥–æ ‚Äî –≤—ã–±–æ—Ä —É–≥–∞–¥–∞–≤—à–µ–≥–æ, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ
  const isHost = player.is_host;
  const canPickGuesser = isHost && players.length > 0;
  const guesserSelect = canPickGuesser ? (
    <>
      <label>üéØ –ö—Ç–æ —É–≥–∞–¥–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ?</label>
      <select value={correctGuesser} onChange={e => setCorrectGuesser(e.target.value)}>
        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞</option>
        {players.filter((p: any) => p.id !== current.author).map((p: any) => (
          <option key={p.id} value={p.id}>{p.name}</option>
        ))}
      </select>
      <label>‚ùå –°–∫–æ–ª—å–∫–æ –±—ã–ª–æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫?</label>
      <input type="number" value={wrongGuesses} onChange={e => setWrongGuesses(Number(e.target.value))} />
      <button onClick={handleResult} disabled={loading || !correctGuesser}>
        {loading ? "üíæ –°–æ—Ö—Ä–∞–Ω—è—é..." : "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"}
      </button>
      {result && <div className="center">üéâ {result}</div>}
    </>
  ) : null;

  return (
    <div className="app-container">
      <h2>–£–≥–∞–¥–∞–π, –∫—Ç–æ –Ω–∞–ø–∏—Å–∞–ª:</h2>
      <div style={{ margin: "20px 0", fontSize: "1.2em", color: "#7ed957" }}>
        "{current.text}"
      </div>
      <div style={{ marginBottom: 10 }}>üìù –û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤: <b>{questionsLeft}</b></div>
      {isHost ? guesserSelect : <div style={{ margin: "10px 0" }}>–û–∂–∏–¥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è –≤–µ–¥—É—â–µ–≥–æ...</div>}
      {scoreboard}
    </div>
  );
}

